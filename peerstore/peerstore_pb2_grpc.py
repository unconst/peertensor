# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from peerstore import peerstore_pb2 as peerstore_dot_peerstore__pb2


class PeerstoreStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Subscribe = channel.unary_unary(
                '/Peerstore/Subscribe',
                request_serializer=peerstore_dot_peerstore__pb2.SubscribeRequest.SerializeToString,
                response_deserializer=peerstore_dot_peerstore__pb2.SubscribeResponse.FromString,
                )
        self.Unsubscribe = channel.unary_unary(
                '/Peerstore/Unsubscribe',
                request_serializer=peerstore_dot_peerstore__pb2.UnsubscribeRequest.SerializeToString,
                response_deserializer=peerstore_dot_peerstore__pb2.UnsubscribeResponse.FromString,
                )
        self.GetPeers = channel.unary_unary(
                '/Peerstore/GetPeers',
                request_serializer=peerstore_dot_peerstore__pb2.GetPeersRequest.SerializeToString,
                response_deserializer=peerstore_dot_peerstore__pb2.GetPeersResponse.FromString,
                )


class PeerstoreServicer(object):
    """Missing associated documentation comment in .proto file"""

    def Subscribe(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Unsubscribe(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPeers(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PeerstoreServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Subscribe': grpc.unary_unary_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=peerstore_dot_peerstore__pb2.SubscribeRequest.FromString,
                    response_serializer=peerstore_dot_peerstore__pb2.SubscribeResponse.SerializeToString,
            ),
            'Unsubscribe': grpc.unary_unary_rpc_method_handler(
                    servicer.Unsubscribe,
                    request_deserializer=peerstore_dot_peerstore__pb2.UnsubscribeRequest.FromString,
                    response_serializer=peerstore_dot_peerstore__pb2.UnsubscribeResponse.SerializeToString,
            ),
            'GetPeers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPeers,
                    request_deserializer=peerstore_dot_peerstore__pb2.GetPeersRequest.FromString,
                    response_serializer=peerstore_dot_peerstore__pb2.GetPeersResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Peerstore', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Peerstore(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Peerstore/Subscribe',
            peerstore_dot_peerstore__pb2.SubscribeRequest.SerializeToString,
            peerstore_dot_peerstore__pb2.SubscribeResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Unsubscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Peerstore/Unsubscribe',
            peerstore_dot_peerstore__pb2.UnsubscribeRequest.SerializeToString,
            peerstore_dot_peerstore__pb2.UnsubscribeResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPeers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Peerstore/GetPeers',
            peerstore_dot_peerstore__pb2.GetPeersRequest.SerializeToString,
            peerstore_dot_peerstore__pb2.GetPeersResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
